
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Tue May 05 14:53:53 CEST 2015
//----------------------------------------------------

package asint;

import java_cup.runtime.*;
import alex.AnalizadorLexicoTiny;
import alex.UnidadLexica;
import errors.GestionErroresTiny;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Tue May 05 14:53:53 CEST 2015
  */
public class AnalizadorSintacticoTiny extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintacticoTiny() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\127\000\002\002\006\000\002\002\004\000\002\003" +
    "\010\000\002\006\004\000\002\006\002\000\002\015\005" +
    "\000\002\016\004\000\002\016\003\000\002\007\004\000" +
    "\002\007\004\000\002\007\002\000\002\017\006\000\002" +
    "\017\002\000\002\012\011\000\002\013\012\000\002\020" +
    "\005\000\002\020\002\000\002\021\006\000\002\021\002" +
    "\000\002\004\004\000\002\004\002\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\005\003\000\002\005\003\000\002\005\003\000\002\005" +
    "\003\000\002\005\003\000\002\011\006\000\002\022\011" +
    "\000\002\023\007\000\002\024\014\000\002\033\004\000" +
    "\002\033\002\000\002\034\005\000\002\034\002\000\002" +
    "\025\011\000\002\026\007\000\002\027\011\000\002\031" +
    "\007\000\002\031\010\000\002\032\004\000\002\032\002" +
    "\000\002\030\005\000\002\010\003\000\002\010\003\000" +
    "\002\010\003\000\002\010\003\000\002\010\003\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\035" +
    "\004\000\002\035\003\000\002\036\005\000\002\036\003" +
    "\000\002\037\005\000\002\037\003\000\002\040\005\000" +
    "\002\040\003\000\002\041\003\000\002\041\003\000\002" +
    "\043\003\000\002\043\003\000\002\043\003\000\002\043" +
    "\003\000\002\043\003\000\002\043\003\000\002\044\005" +
    "\000\002\044\005\000\002\044\003\000\002\045\005\000" +
    "\002\045\003\000\002\046\005\000\002\046\003\000\002" +
    "\047\005\000\002\047\003\000\002\050\005\000\002\050" +
    "\003\000\002\051\005\000\002\051\003\000\002\052\005" +
    "\000\002\052\003\000\002\052\003\000\002\052\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\256\000\004\006\005\001\002\000\004\002\260\001" +
    "\002\000\004\007\223\001\002\000\004\004\007\001\002" +
    "\000\036\005\uffed\015\uffed\021\uffed\024\uffed\026\uffed\031" +
    "\uffed\034\uffed\040\uffed\041\uffed\042\uffed\043\uffed\044\uffed" +
    "\045\uffed\046\uffed\001\002\000\036\005\017\015\023\021" +
    "\013\024\037\026\032\031\040\034\022\040\020\041\012" +
    "\042\030\043\014\044\026\045\035\046\024\001\002\000" +
    "\062\005\uffe8\015\uffe8\017\uffe8\020\uffe8\021\uffe8\023\uffe8" +
    "\024\uffe8\025\uffe8\026\uffe8\030\uffe8\031\uffe8\032\uffe8\034" +
    "\uffe8\035\uffe8\036\uffe8\037\uffe8\040\uffe8\041\uffe8\042\uffe8" +
    "\043\uffe8\044\uffe8\045\uffe8\046\uffe8\072\uffe8\001\002\000" +
    "\006\046\uffd3\067\uffd3\001\002\000\016\046\053\050\063" +
    "\051\062\052\056\066\050\067\061\001\002\000\006\046" +
    "\uffd1\067\uffd1\001\002\000\062\005\uffe5\015\uffe5\017\uffe5" +
    "\020\uffe5\021\uffe5\023\uffe5\024\uffe5\025\uffe5\026\uffe5\030" +
    "\uffe5\031\uffe5\032\uffe5\034\uffe5\035\uffe5\036\uffe5\037\uffe5" +
    "\040\uffe5\041\uffe5\042\uffe5\043\uffe5\044\uffe5\045\uffe5\046" +
    "\uffe5\072\uffe5\001\002\000\062\005\uffee\015\uffee\017\uffee" +
    "\020\uffee\021\uffee\023\uffee\024\uffee\025\uffee\026\uffee\030" +
    "\uffee\031\uffee\032\uffee\034\uffee\035\uffee\036\uffee\037\uffee" +
    "\040\uffee\041\uffee\042\uffee\043\uffee\044\uffee\045\uffee\046" +
    "\uffee\072\uffee\001\002\000\004\002\001\001\002\000\022" +
    "\046\053\050\063\051\062\052\056\053\161\054\162\066" +
    "\050\067\061\001\002\000\062\005\uffe4\015\uffe4\017\uffe4" +
    "\020\uffe4\021\uffe4\023\uffe4\024\uffe4\025\uffe4\026\uffe4\030" +
    "\uffe4\031\uffe4\032\uffe4\034\uffe4\035\uffe4\036\uffe4\037\uffe4" +
    "\040\uffe4\041\uffe4\042\uffe4\043\uffe4\044\uffe4\045\uffe4\046" +
    "\uffe4\072\uffe4\001\002\000\004\067\173\001\002\000\016" +
    "\046\053\050\063\051\062\052\056\066\050\067\061\001" +
    "\002\000\004\101\156\001\002\000\006\046\ufff5\067\ufff5" +
    "\001\002\000\006\046\uffd0\067\uffd0\001\002\000\062\005" +
    "\uffea\015\uffea\017\uffea\020\uffea\021\uffea\023\uffea\024\uffea" +
    "\025\uffea\026\uffea\030\uffea\031\uffea\032\uffea\034\uffea\035" +
    "\uffea\036\uffea\037\uffea\040\uffea\041\uffea\042\uffea\043\uffea" +
    "\044\uffea\045\uffea\046\uffea\072\uffea\001\002\000\006\046" +
    "\uffd2\067\uffd2\001\002\000\062\005\uffe7\015\uffe7\017\uffe7" +
    "\020\uffe7\021\uffe7\023\uffe7\024\uffe7\025\uffe7\026\uffe7\030" +
    "\uffe7\031\uffe7\032\uffe7\034\uffe7\035\uffe7\036\uffe7\037\uffe7" +
    "\040\uffe7\041\uffe7\042\uffe7\043\uffe7\044\uffe7\045\uffe7\046" +
    "\uffe7\072\uffe7\001\002\000\004\046\141\001\002\000\062" +
    "\005\uffe9\015\uffe9\017\uffe9\020\uffe9\021\uffe9\023\uffe9\024" +
    "\uffe9\025\uffe9\026\uffe9\030\uffe9\031\uffe9\032\uffe9\034\uffe9" +
    "\035\uffe9\036\uffe9\037\uffe9\040\uffe9\041\uffe9\042\uffe9\043" +
    "\uffe9\044\uffe9\045\uffe9\046\uffe9\072\uffe9\001\002\000\062" +
    "\005\uffe6\015\uffe6\017\uffe6\020\uffe6\021\uffe6\023\uffe6\024" +
    "\uffe6\025\uffe6\026\uffe6\030\uffe6\031\uffe6\032\uffe6\034\uffe6" +
    "\035\uffe6\036\uffe6\037\uffe6\040\uffe6\041\uffe6\042\uffe6\043" +
    "\uffe6\044\uffe6\045\uffe6\046\uffe6\072\uffe6\001\002\000\006" +
    "\046\uffcf\067\uffcf\001\002\000\062\005\uffec\015\uffec\017" +
    "\uffec\020\uffec\021\uffec\023\uffec\024\uffec\025\uffec\026\uffec" +
    "\030\uffec\031\uffec\032\uffec\034\uffec\035\uffec\036\uffec\037" +
    "\uffec\040\uffec\041\uffec\042\uffec\043\uffec\044\uffec\045\uffec" +
    "\046\uffec\072\uffec\001\002\000\004\067\124\001\002\000" +
    "\036\015\uffed\021\uffed\024\uffed\026\uffed\031\uffed\032\uffed" +
    "\034\uffed\040\uffed\041\uffed\042\uffed\043\uffed\044\uffed\045" +
    "\uffed\046\uffed\001\002\000\062\005\uffeb\015\uffeb\017\uffeb" +
    "\020\uffeb\021\uffeb\023\uffeb\024\uffeb\025\uffeb\026\uffeb\030" +
    "\uffeb\031\uffeb\032\uffeb\034\uffeb\035\uffeb\036\uffeb\037\uffeb" +
    "\040\uffeb\041\uffeb\042\uffeb\043\uffeb\044\uffeb\045\uffeb\046" +
    "\uffeb\072\uffeb\001\002\000\036\015\023\021\013\024\037" +
    "\026\032\031\040\032\043\034\022\040\020\041\012\042" +
    "\030\043\014\044\026\045\035\046\024\001\002\000\016" +
    "\046\053\050\063\051\062\052\056\066\050\067\061\001" +
    "\002\000\052\016\uffb3\022\uffb3\033\uffb3\055\uffb3\056\uffb3" +
    "\057\103\060\uffb3\061\uffb3\062\uffb3\064\uffb3\065\uffb3\070" +
    "\uffb3\073\uffb3\074\uffb3\075\uffb3\076\uffb3\077\uffb3\100\uffb3" +
    "\102\uffb3\103\uffb3\001\002\000\050\016\uffb5\022\uffb5\033" +
    "\uffb5\055\uffb5\056\uffb5\060\101\061\uffb5\062\uffb5\064\uffb5" +
    "\065\uffb5\070\uffb5\073\uffb5\074\uffb5\075\uffb5\076\uffb5\077" +
    "\uffb5\100\uffb5\102\uffb5\103\uffb5\001\002\000\046\016\uffb7" +
    "\022\uffb7\033\uffb7\055\uffb7\056\uffb7\061\077\062\uffb7\064" +
    "\uffb7\065\uffb7\070\uffb7\073\uffb7\074\uffb7\075\uffb7\076\uffb7" +
    "\077\uffb7\100\uffb7\102\uffb7\103\uffb7\001\002\000\044\016" +
    "\uffb9\022\uffb9\033\uffb9\055\uffb9\056\uffb9\062\075\064\uffb9" +
    "\065\uffb9\070\uffb9\073\uffb9\074\uffb9\075\uffb9\076\uffb9\077" +
    "\uffb9\100\uffb9\102\uffb9\103\uffb9\001\002\000\016\046\053" +
    "\050\063\051\062\052\056\066\050\067\061\001\002\000" +
    "\036\016\uffc4\022\uffc4\033\uffc4\064\uffc4\065\uffc4\070\uffc4" +
    "\073\uffc4\074\uffc4\075\uffc4\076\uffc4\077\uffc4\100\uffc4\102" +
    "\uffc4\103\uffc4\001\002\000\036\016\uffc6\022\uffc6\033\uffc6" +
    "\064\uffc6\065\uffc6\070\uffc6\073\114\074\113\075\116\076" +
    "\115\077\120\100\121\102\uffc6\103\uffc6\001\002\000\054" +
    "\016\uffab\022\uffab\033\uffab\055\uffab\056\uffab\057\uffab\060" +
    "\uffab\061\uffab\062\uffab\063\uffab\064\uffab\065\uffab\070\uffab" +
    "\073\uffab\074\uffab\075\uffab\076\uffab\077\uffab\100\uffab\102" +
    "\uffab\103\uffab\001\002\000\022\016\uffc8\022\uffc8\033\uffc8" +
    "\064\111\065\uffc8\070\uffc8\102\uffc8\103\uffc8\001\002\000" +
    "\020\016\uffca\022\uffca\033\uffca\065\107\070\uffca\102\uffca" +
    "\103\uffca\001\002\000\036\016\uffc3\022\uffc3\033\uffc3\064" +
    "\uffc3\065\uffc3\070\uffc3\073\uffc3\074\uffc3\075\uffc3\076\uffc3" +
    "\077\uffc3\100\uffc3\102\uffc3\103\uffc3\001\002\000\004\033" +
    "\106\001\002\000\042\016\uffc2\022\uffc2\033\uffc2\055\073" +
    "\056\072\064\uffc2\065\uffc2\070\uffc2\073\uffc2\074\uffc2\075" +
    "\uffc2\076\uffc2\077\uffc2\100\uffc2\102\uffc2\103\uffc2\001\002" +
    "\000\016\046\053\050\063\051\062\052\056\066\050\067" +
    "\061\001\002\000\054\016\uffac\022\uffac\033\uffac\055\uffac" +
    "\056\uffac\057\uffac\060\uffac\061\uffac\062\uffac\063\uffac\064" +
    "\uffac\065\uffac\070\uffac\073\uffac\074\uffac\075\uffac\076\uffac" +
    "\077\uffac\100\uffac\102\uffac\103\uffac\001\002\000\054\016" +
    "\uffad\022\uffad\033\uffad\055\uffad\056\uffad\057\uffad\060\uffad" +
    "\061\uffad\062\uffad\063\uffad\064\uffad\065\uffad\070\uffad\073" +
    "\uffad\074\uffad\075\uffad\076\uffad\077\uffad\100\uffad\102\uffad" +
    "\103\uffad\001\002\000\054\016\uffaf\022\uffaf\033\uffaf\055" +
    "\uffaf\056\uffaf\057\uffaf\060\uffaf\061\uffaf\062\uffaf\063\066" +
    "\064\uffaf\065\uffaf\070\uffaf\073\uffaf\074\uffaf\075\uffaf\076" +
    "\uffaf\077\uffaf\100\uffaf\102\uffaf\103\uffaf\001\002\000\052" +
    "\016\uffb1\022\uffb1\033\uffb1\055\uffb1\056\uffb1\057\uffb1\060" +
    "\uffb1\061\uffb1\062\uffb1\064\uffb1\065\uffb1\070\uffb1\073\uffb1" +
    "\074\uffb1\075\uffb1\076\uffb1\077\uffb1\100\uffb1\102\uffb1\103" +
    "\uffb1\001\002\000\012\046\053\050\063\051\062\067\061" +
    "\001\002\000\052\016\uffb0\022\uffb0\033\uffb0\055\uffb0\056" +
    "\uffb0\057\uffb0\060\uffb0\061\uffb0\062\uffb0\064\uffb0\065\uffb0" +
    "\070\uffb0\073\uffb0\074\uffb0\075\uffb0\076\uffb0\077\uffb0\100" +
    "\uffb0\102\uffb0\103\uffb0\001\002\000\004\070\071\001\002" +
    "\000\054\016\uffae\022\uffae\033\uffae\055\uffae\056\uffae\057" +
    "\uffae\060\uffae\061\uffae\062\uffae\063\uffae\064\uffae\065\uffae" +
    "\070\uffae\073\uffae\074\uffae\075\uffae\076\uffae\077\uffae\100" +
    "\uffae\102\uffae\103\uffae\001\002\000\012\046\053\050\063" +
    "\051\062\067\061\001\002\000\012\046\053\050\063\051" +
    "\062\067\061\001\002\000\044\016\uffbb\022\uffbb\033\uffbb" +
    "\055\uffbb\056\uffbb\062\075\064\uffbb\065\uffbb\070\uffbb\073" +
    "\uffbb\074\uffbb\075\uffbb\076\uffbb\077\uffbb\100\uffbb\102\uffbb" +
    "\103\uffbb\001\002\000\012\046\053\050\063\051\062\067" +
    "\061\001\002\000\046\016\uffb8\022\uffb8\033\uffb8\055\uffb8" +
    "\056\uffb8\061\077\062\uffb8\064\uffb8\065\uffb8\070\uffb8\073" +
    "\uffb8\074\uffb8\075\uffb8\076\uffb8\077\uffb8\100\uffb8\102\uffb8" +
    "\103\uffb8\001\002\000\012\046\053\050\063\051\062\067" +
    "\061\001\002\000\050\016\uffb6\022\uffb6\033\uffb6\055\uffb6" +
    "\056\uffb6\060\101\061\uffb6\062\uffb6\064\uffb6\065\uffb6\070" +
    "\uffb6\073\uffb6\074\uffb6\075\uffb6\076\uffb6\077\uffb6\100\uffb6" +
    "\102\uffb6\103\uffb6\001\002\000\012\046\053\050\063\051" +
    "\062\067\061\001\002\000\052\016\uffb4\022\uffb4\033\uffb4" +
    "\055\uffb4\056\uffb4\057\103\060\uffb4\061\uffb4\062\uffb4\064" +
    "\uffb4\065\uffb4\070\uffb4\073\uffb4\074\uffb4\075\uffb4\076\uffb4" +
    "\077\uffb4\100\uffb4\102\uffb4\103\uffb4\001\002\000\012\046" +
    "\053\050\063\051\062\067\061\001\002\000\052\016\uffb2" +
    "\022\uffb2\033\uffb2\055\uffb2\056\uffb2\057\uffb2\060\uffb2\061" +
    "\uffb2\062\uffb2\064\uffb2\065\uffb2\070\uffb2\073\uffb2\074\uffb2" +
    "\075\uffb2\076\uffb2\077\uffb2\100\uffb2\102\uffb2\103\uffb2\001" +
    "\002\000\044\016\uffba\022\uffba\033\uffba\055\uffba\056\uffba" +
    "\062\075\064\uffba\065\uffba\070\uffba\073\uffba\074\uffba\075" +
    "\uffba\076\uffba\077\uffba\100\uffba\102\uffba\103\uffba\001\002" +
    "\000\062\005\uffda\015\uffda\017\uffda\020\uffda\021\uffda\023" +
    "\uffda\024\uffda\025\uffda\026\uffda\030\uffda\031\uffda\032\uffda" +
    "\034\uffda\035\uffda\036\uffda\037\uffda\040\uffda\041\uffda\042" +
    "\uffda\043\uffda\044\uffda\045\uffda\046\uffda\072\uffda\001\002" +
    "\000\014\046\053\050\063\051\062\052\056\067\061\001" +
    "\002\000\022\016\uffc9\022\uffc9\033\uffc9\064\111\065\uffc9" +
    "\070\uffc9\102\uffc9\103\uffc9\001\002\000\014\046\053\050" +
    "\063\051\062\052\056\067\061\001\002\000\036\016\uffc7" +
    "\022\uffc7\033\uffc7\064\uffc7\065\uffc7\070\uffc7\073\114\074" +
    "\113\075\116\076\115\077\120\100\121\102\uffc7\103\uffc7" +
    "\001\002\000\014\046\uffc0\050\uffc0\051\uffc0\052\uffc0\067" +
    "\uffc0\001\002\000\014\046\uffc1\050\uffc1\051\uffc1\052\uffc1" +
    "\067\uffc1\001\002\000\014\046\uffbe\050\uffbe\051\uffbe\052" +
    "\uffbe\067\uffbe\001\002\000\014\046\uffbf\050\uffbf\051\uffbf" +
    "\052\uffbf\067\uffbf\001\002\000\014\046\053\050\063\051" +
    "\062\052\056\067\061\001\002\000\014\046\uffbd\050\uffbd" +
    "\051\uffbd\052\uffbd\067\uffbd\001\002\000\014\046\uffbc\050" +
    "\uffbc\051\uffbc\052\uffbc\067\uffbc\001\002\000\036\016\uffc5" +
    "\022\uffc5\033\uffc5\064\uffc5\065\uffc5\070\uffc5\073\uffc5\074" +
    "\uffc5\075\uffc5\076\uffc5\077\uffc5\100\uffc5\102\uffc5\103\uffc5" +
    "\001\002\000\016\016\uffcb\022\uffcb\033\uffcb\070\uffcb\102" +
    "\uffcb\103\uffcb\001\002\000\004\046\024\001\002\000\004" +
    "\103\126\001\002\000\020\046\053\050\063\051\062\052" +
    "\056\066\050\067\061\103\uffde\001\002\000\006\102\uffdc" +
    "\103\uffdc\001\002\000\004\103\131\001\002\000\004\046" +
    "\024\001\002\000\004\070\133\001\002\000\036\015\uffed" +
    "\021\uffed\024\uffed\025\uffed\026\uffed\031\uffed\034\uffed\040" +
    "\uffed\041\uffed\042\uffed\043\uffed\044\uffed\045\uffed\046\uffed" +
    "\001\002\000\036\015\023\021\013\024\037\025\135\026" +
    "\032\031\040\034\022\040\020\041\012\042\030\043\014" +
    "\044\026\045\035\046\024\001\002\000\062\005\uffe0\015" +
    "\uffe0\017\uffe0\020\uffe0\021\uffe0\023\uffe0\024\uffe0\025\uffe0" +
    "\026\uffe0\030\uffe0\031\uffe0\032\uffe0\034\uffe0\035\uffe0\036" +
    "\uffe0\037\uffe0\040\uffe0\041\uffe0\042\uffe0\043\uffe0\044\uffe0" +
    "\045\uffe0\046\uffe0\072\uffe0\001\002\000\006\102\137\103" +
    "\uffdf\001\002\000\016\046\053\050\063\051\062\052\056" +
    "\066\050\067\061\001\002\000\006\102\uffdd\103\uffdd\001" +
    "\002\000\004\027\142\001\002\000\004\046\143\001\002" +
    "\000\004\022\144\001\002\000\036\015\uffed\021\uffed\024" +
    "\uffed\026\uffed\030\uffed\031\uffed\034\uffed\040\uffed\041\uffed" +
    "\042\uffed\043\uffed\044\uffed\045\uffed\046\uffed\001\002\000" +
    "\036\015\023\021\013\024\037\026\032\030\146\031\040" +
    "\034\022\040\020\041\012\042\030\043\014\044\026\045" +
    "\035\046\024\001\002\000\062\005\uffdb\015\uffdb\017\uffdb" +
    "\020\uffdb\021\uffdb\023\uffdb\024\uffdb\025\uffdb\026\uffdb\030" +
    "\uffdb\031\uffdb\032\uffdb\034\uffdb\035\uffdb\036\uffdb\037\uffdb" +
    "\040\uffdb\041\uffdb\042\uffdb\043\uffdb\044\uffdb\045\uffdb\046" +
    "\uffdb\072\uffdb\001\002\000\006\046\150\067\152\001\002" +
    "\000\006\101\156\103\157\001\002\000\064\005\ufffc\006" +
    "\ufffc\015\ufffc\017\ufffc\020\ufffc\021\ufffc\023\ufffc\024\ufffc" +
    "\025\ufffc\026\ufffc\030\ufffc\031\ufffc\032\ufffc\034\ufffc\035" +
    "\ufffc\036\ufffc\037\ufffc\040\ufffc\041\ufffc\042\ufffc\043\ufffc" +
    "\044\ufffc\045\ufffc\046\ufffc\072\ufffc\001\002\000\004\050" +
    "\154\001\002\000\064\005\ufffa\006\ufffa\015\ufffa\017\ufffa" +
    "\020\ufffa\021\ufffa\023\ufffa\024\ufffa\025\ufffa\026\ufffa\030" +
    "\ufffa\031\ufffa\032\ufffa\034\ufffa\035\ufffa\036\ufffa\037\ufffa" +
    "\040\ufffa\041\ufffa\042\ufffa\043\ufffa\044\ufffa\045\ufffa\046" +
    "\ufffa\072\ufffa\001\002\000\004\070\155\001\002\000\006" +
    "\046\ufff6\067\ufff6\001\002\000\022\046\053\050\063\051" +
    "\062\052\056\053\161\054\162\066\050\067\061\001\002" +
    "\000\064\005\ufffb\006\ufffb\015\ufffb\017\ufffb\020\ufffb\021" +
    "\ufffb\023\ufffb\024\ufffb\025\ufffb\026\ufffb\030\ufffb\031\ufffb" +
    "\032\ufffb\034\ufffb\035\ufffb\036\ufffb\037\ufffb\040\ufffb\041" +
    "\ufffb\042\ufffb\043\ufffb\044\ufffb\045\ufffb\046\ufffb\072\ufffb" +
    "\001\002\000\004\103\164\001\002\000\006\070\uffce\103" +
    "\uffce\001\002\000\006\070\uffcd\103\uffcd\001\002\000\006" +
    "\070\uffcc\103\uffcc\001\002\000\070\005\uffe3\006\uffe3\015" +
    "\uffe3\017\uffe3\020\uffe3\021\uffe3\023\uffe3\024\uffe3\025\uffe3" +
    "\026\uffe3\030\uffe3\031\uffe3\032\uffe3\034\uffe3\035\uffe3\036" +
    "\uffe3\037\uffe3\040\uffe3\041\uffe3\042\uffe3\043\uffe3\044\uffe3" +
    "\045\uffe3\046\uffe3\070\uffe3\072\uffe3\103\uffe3\001\002\000" +
    "\004\016\166\001\002\000\036\015\uffed\017\uffed\021\uffed" +
    "\024\uffed\026\uffed\031\uffed\034\uffed\040\uffed\041\uffed\042" +
    "\uffed\043\uffed\044\uffed\045\uffed\046\uffed\001\002\000\036" +
    "\015\023\017\170\021\013\024\037\026\032\031\040\034" +
    "\022\040\020\041\012\042\030\043\014\044\026\045\035" +
    "\046\024\001\002\000\036\015\uffed\020\uffed\021\uffed\024" +
    "\uffed\026\uffed\031\uffed\034\uffed\040\uffed\041\uffed\042\uffed" +
    "\043\uffed\044\uffed\045\uffed\046\uffed\001\002\000\036\015" +
    "\023\020\172\021\013\024\037\026\032\031\040\034\022" +
    "\040\020\041\012\042\030\043\014\044\026\045\035\046" +
    "\024\001\002\000\062\005\uffe2\015\uffe2\017\uffe2\020\uffe2" +
    "\021\uffe2\023\uffe2\024\uffe2\025\uffe2\026\uffe2\030\uffe2\031" +
    "\uffe2\032\uffe2\034\uffe2\035\uffe2\036\uffe2\037\uffe2\040\uffe2" +
    "\041\uffe2\042\uffe2\043\uffe2\044\uffe2\045\uffe2\046\uffe2\072" +
    "\uffe2\001\002\000\004\046\174\001\002\000\004\070\175" +
    "\001\002\000\004\035\177\001\002\000\010\035\206\036" +
    "\204\037\uffd5\001\002\000\004\067\200\001\002\000\022" +
    "\046\053\050\063\051\062\052\056\053\161\054\162\066" +
    "\050\067\061\001\002\000\004\070\202\001\002\000\042" +
    "\015\uffed\021\uffed\024\uffed\026\uffed\031\uffed\034\uffed\035" +
    "\uffed\036\uffed\037\uffed\040\uffed\041\uffed\042\uffed\043\uffed" +
    "\044\uffed\045\uffed\046\uffed\001\002\000\042\015\023\021" +
    "\013\024\037\026\032\031\040\034\022\035\uffd8\036\uffd8" +
    "\037\uffd8\040\020\041\012\042\030\043\014\044\026\045" +
    "\035\046\024\001\002\000\036\015\uffed\021\uffed\024\uffed" +
    "\026\uffed\031\uffed\034\uffed\037\uffed\040\uffed\041\uffed\042" +
    "\uffed\043\uffed\044\uffed\045\uffed\046\uffed\001\002\000\004" +
    "\037\213\001\002\000\004\067\207\001\002\000\022\046" +
    "\053\050\063\051\062\052\056\053\161\054\162\066\050" +
    "\067\061\001\002\000\004\070\211\001\002\000\042\015" +
    "\uffed\021\uffed\024\uffed\026\uffed\031\uffed\034\uffed\035\uffed" +
    "\036\uffed\037\uffed\040\uffed\041\uffed\042\uffed\043\uffed\044" +
    "\uffed\045\uffed\046\uffed\001\002\000\042\015\023\021\013" +
    "\024\037\026\032\031\040\034\022\035\uffd7\036\uffd7\037" +
    "\uffd7\040\020\041\012\042\030\043\014\044\026\045\035" +
    "\046\024\001\002\000\062\005\uffd9\015\uffd9\017\uffd9\020" +
    "\uffd9\021\uffd9\023\uffd9\024\uffd9\025\uffd9\026\uffd9\030\uffd9" +
    "\031\uffd9\032\uffd9\034\uffd9\035\uffd9\036\uffd9\037\uffd9\040" +
    "\uffd9\041\uffd9\042\uffd9\043\uffd9\044\uffd9\045\uffd9\046\uffd9" +
    "\072\uffd9\001\002\000\036\015\023\021\013\024\037\026" +
    "\032\031\040\034\022\037\uffd6\040\020\041\012\042\030" +
    "\043\014\044\026\045\035\046\024\001\002\000\004\103" +
    "\216\001\002\000\062\005\uffd4\015\uffd4\017\uffd4\020\uffd4" +
    "\021\uffd4\023\uffd4\024\uffd4\025\uffd4\026\uffd4\030\uffd4\031" +
    "\uffd4\032\uffd4\034\uffd4\035\uffd4\036\uffd4\037\uffd4\040\uffd4" +
    "\041\uffd4\042\uffd4\043\uffd4\044\uffd4\045\uffd4\046\uffd4\072" +
    "\uffd4\001\002\000\004\022\220\001\002\000\036\015\uffed" +
    "\021\uffed\023\uffed\024\uffed\026\uffed\031\uffed\034\uffed\040" +
    "\uffed\041\uffed\042\uffed\043\uffed\044\uffed\045\uffed\046\uffed" +
    "\001\002\000\036\015\023\021\013\023\222\024\037\026" +
    "\032\031\040\034\022\040\020\041\012\042\030\043\014" +
    "\044\026\045\035\046\024\001\002\000\062\005\uffe1\015" +
    "\uffe1\017\uffe1\020\uffe1\021\uffe1\023\uffe1\024\uffe1\025\uffe1" +
    "\026\uffe1\030\uffe1\031\uffe1\032\uffe1\034\uffe1\035\uffe1\036" +
    "\uffe1\037\uffe1\040\uffe1\041\uffe1\042\uffe1\043\uffe1\044\uffe1" +
    "\045\uffe1\046\uffe1\072\uffe1\001\002\000\016\006\ufffd\041" +
    "\ufffd\042\ufffd\043\ufffd\044\ufffd\045\ufffd\001\002\000\016" +
    "\006\225\041\012\042\030\043\014\044\026\045\035\001" +
    "\002\000\004\011\227\001\002\000\016\006\ufffe\041\ufffe" +
    "\042\ufffe\043\ufffe\044\ufffe\045\ufffe\001\002\000\020\004" +
    "\ufff7\041\ufff7\042\ufff7\043\ufff7\044\ufff7\045\ufff7\046\ufff7" +
    "\001\002\000\020\004\uffff\041\012\042\030\043\014\044" +
    "\026\045\035\046\232\001\002\000\020\004\ufff9\041\ufff9" +
    "\042\ufff9\043\ufff9\044\ufff9\045\ufff9\046\ufff9\001\002\000" +
    "\004\067\252\001\002\000\004\046\235\001\002\000\020" +
    "\004\ufff8\041\ufff8\042\ufff8\043\ufff8\044\ufff8\045\ufff8\046" +
    "\ufff8\001\002\000\004\067\236\001\002\000\016\041\012" +
    "\042\030\043\014\044\026\045\035\070\ufff1\001\002\000" +
    "\004\070\246\001\002\000\004\046\241\001\002\000\006" +
    "\070\uffef\102\uffef\001\002\000\006\070\ufff2\102\243\001" +
    "\002\000\014\041\012\042\030\043\014\044\026\045\035" +
    "\001\002\000\004\046\245\001\002\000\006\070\ufff0\102" +
    "\ufff0\001\002\000\004\071\247\001\002\000\036\015\uffed" +
    "\021\uffed\024\uffed\026\uffed\031\uffed\034\uffed\040\uffed\041" +
    "\uffed\042\uffed\043\uffed\044\uffed\045\uffed\046\uffed\072\uffed" +
    "\001\002\000\036\015\023\021\013\024\037\026\032\031" +
    "\040\034\022\040\020\041\012\042\030\043\014\044\026" +
    "\045\035\046\024\072\251\001\002\000\020\004\ufff3\041" +
    "\ufff3\042\ufff3\043\ufff3\044\ufff3\045\ufff3\046\ufff3\001\002" +
    "\000\016\041\012\042\030\043\014\044\026\045\035\070" +
    "\ufff1\001\002\000\004\070\254\001\002\000\004\071\255" +
    "\001\002\000\036\015\uffed\021\uffed\024\uffed\026\uffed\031" +
    "\uffed\034\uffed\040\uffed\041\uffed\042\uffed\043\uffed\044\uffed" +
    "\045\uffed\046\uffed\072\uffed\001\002\000\036\015\023\021" +
    "\013\024\037\026\032\031\040\034\022\040\020\041\012" +
    "\042\030\043\014\044\026\045\035\046\024\072\257\001" +
    "\002\000\020\004\ufff4\041\ufff4\042\ufff4\043\ufff4\044\ufff4" +
    "\045\ufff4\046\ufff4\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\256\000\006\002\003\003\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\004\007" +
    "\001\001\000\030\005\015\010\024\011\040\015\035\022" +
    "\026\023\032\024\010\025\030\026\033\027\014\030\020" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\035" +
    "\216\036\054\037\053\040\051\041\050\044\057\045\046" +
    "\046\045\047\044\050\043\051\064\052\063\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\014\214\035\162\036\054\037\053\040" +
    "\051\041\050\044\057\045\046\046\045\047\044\050\043" +
    "\051\064\052\063\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\035\164\036\054\037\053\040\051\041\050" +
    "\044\057\045\046\046\045\047\044\050\043\051\064\052" +
    "\063\001\001\000\002\001\001\000\004\017\146\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\004\041\001\001\000\002\001\001\000\030" +
    "\005\015\010\024\011\040\015\035\022\026\023\032\024" +
    "\010\025\030\026\033\027\014\030\020\001\001\000\032" +
    "\035\056\036\054\037\053\040\051\041\050\044\057\045" +
    "\046\046\045\047\044\050\043\051\064\052\063\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\035\122\036\054\037\053\040\051" +
    "\041\050\044\057\045\046\046\045\047\044\050\043\051" +
    "\064\052\063\001\001\000\002\001\001\000\004\043\116" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\035\067\036\054\037\053\040\051\041\050\044" +
    "\057\045\046\046\045\047\044\050\043\051\064\052\063" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\051\066\052\063\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\045\104\046\045\047\044\050\043\051\064\052\063" +
    "\001\001\000\016\045\073\046\045\047\044\050\043\051" +
    "\064\052\063\001\001\000\002\001\001\000\014\046\075" +
    "\047\044\050\043\051\064\052\063\001\001\000\002\001" +
    "\001\000\012\047\077\050\043\051\064\052\063\001\001" +
    "\000\002\001\001\000\010\050\101\051\064\052\063\001" +
    "\001\000\002\001\001\000\006\051\103\052\063\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\037\107\040\051\041\050\044\057\045\046\046\045" +
    "\047\044\050\043\051\064\052\063\001\001\000\002\001" +
    "\001\000\024\040\111\041\050\044\057\045\046\046\045" +
    "\047\044\050\043\051\064\052\063\001\001\000\004\043" +
    "\116\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\041\121\044\057\045" +
    "\046\046\045\047\044\050\043\051\064\052\063\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\011\124\001\001\000\002\001\001" +
    "\000\034\033\127\035\126\036\054\037\053\040\051\041" +
    "\050\044\057\045\046\046\045\047\044\050\043\051\064" +
    "\052\063\001\001\000\004\034\135\001\001\000\002\001" +
    "\001\000\004\011\131\001\001\000\002\001\001\000\004" +
    "\004\133\001\001\000\030\005\015\010\024\011\040\015" +
    "\035\022\026\023\032\024\010\025\030\026\033\027\014" +
    "\030\020\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\035\137\036\054\037\053\040\051\041\050\044\057" +
    "\045\046\046\045\047\044\050\043\051\064\052\063\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\004\144\001\001\000\030\005" +
    "\015\010\024\011\040\015\035\022\026\023\032\024\010" +
    "\025\030\026\033\027\014\030\020\001\001\000\002\001" +
    "\001\000\006\011\152\016\150\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\014\157\035\162" +
    "\036\054\037\053\040\051\041\050\044\057\045\046\046" +
    "\045\047\044\050\043\051\064\052\063\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\004\166\001\001\000\030\005\015\010\024\011" +
    "\040\015\035\022\026\023\032\024\010\025\030\026\033" +
    "\027\014\030\020\001\001\000\004\004\170\001\001\000" +
    "\030\005\015\010\024\011\040\015\035\022\026\023\032" +
    "\024\010\025\030\026\033\027\014\030\020\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\031\175\001\001\000\004\032\204\001\001\000\002\001" +
    "\001\000\034\014\200\035\162\036\054\037\053\040\051" +
    "\041\050\044\057\045\046\046\045\047\044\050\043\051" +
    "\064\052\063\001\001\000\002\001\001\000\004\004\202" +
    "\001\001\000\030\005\015\010\024\011\040\015\035\022" +
    "\026\023\032\024\010\025\030\026\033\027\014\030\020" +
    "\001\001\000\004\004\213\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\014\207\035\162\036\054\037\053" +
    "\040\051\041\050\044\057\045\046\046\045\047\044\050" +
    "\043\051\064\052\063\001\001\000\002\001\001\000\004" +
    "\004\211\001\001\000\030\005\015\010\024\011\040\015" +
    "\035\022\026\023\032\024\010\025\030\026\033\027\014" +
    "\030\020\001\001\000\002\001\001\000\030\005\015\010" +
    "\024\011\040\015\035\022\026\023\032\024\010\025\030" +
    "\026\033\027\014\030\020\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\004\220\001\001" +
    "\000\030\005\015\010\024\011\040\015\035\022\026\023" +
    "\032\024\010\025\030\026\033\027\014\030\020\001\001" +
    "\000\002\001\001\000\004\006\223\001\001\000\006\010" +
    "\024\015\225\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\007\227\001\001\000\010\010\232\012\230\013" +
    "\233\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\010" +
    "\237\020\236\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\021\241\001\001\000\002\001\001\000\004\010" +
    "\243\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\004\247\001\001\000\030\005\015\010" +
    "\024\011\040\015\035\022\026\023\032\024\010\025\030" +
    "\026\033\027\014\030\020\001\001\000\002\001\001\000" +
    "\006\010\237\020\252\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\004\255\001\001\000\030\005\015\010" +
    "\024\011\040\015\035\022\026\023\032\024\010\025\030" +
    "\026\033\027\014\030\020\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintacticoTiny$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintacticoTiny$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintacticoTiny$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
   errores = new GestionErroresTiny();
   AnalizadorLexicoTiny alex = (AnalizadorLexicoTiny)getScanner();
   alex.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

 
   private GestionErroresTiny errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintacticoTiny$actions {
  private final AnalizadorSintacticoTiny parser;

  /** Constructor */
  CUP$AnalizadorSintacticoTiny$actions(AnalizadorSintacticoTiny parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action_part00000000(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintacticoTiny$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // CODE ::= OPC BEGIN S END 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CODE",0, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= CODE EOF 
            {
              Object RESULT =null;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintacticoTiny$parser.done_parsing();
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // OPC ::= DECLARE VAR DV DECLARE FUNCTION DF 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OPC",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // DV ::= DV DV1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DV",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DV ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DV",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DV1 ::= TIPO PEP DV2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DV1",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DV2 ::= ID PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DV2",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DV2 ::= ASIG 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DV2",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DF ::= DF P 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DF",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DF ::= DF F 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DF",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DF ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DF",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // PEP ::= PEP PAP ENT PCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("PEP",13, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // PEP ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("PEP",13, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // P ::= ID PAP ARG PCIERRE LAP S LCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("P",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // F ::= TIPO ID PAP ARG PCIERRE LAP S LCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("F",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ARG ::= TIPO ID ARG1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ARG",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ARG ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ARG",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ARG1 ::= ARG1 COMA TIPO ID 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ARG1",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ARG1 ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ARG1",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // S ::= S S0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("S",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // S ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("S",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // S0 ::= DV1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("S0",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // S0 ::= ASIG 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("S0",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // S0 ::= N_IF 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("S0",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // S0 ::= N_WHILE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("S0",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // S0 ::= N_FOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("S0",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // S0 ::= N_FOREACH 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("S0",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // S0 ::= N_REPEAT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("S0",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // S0 ::= N_SWITCH 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("S0",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // S0 ::= N_RET 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("S0",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ASIG ::= ID IGUAL VAL PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ASIG",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // N_IF ::= IF B THEN S ELSE S ENDIF 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("N_IF",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // N_WHILE ::= WHILE B DO S ENDWHILE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("N_WHILE",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // N_FOR ::= FOR PAP ASIG PUNTOCOMA COND PUNTOCOMA ASIG PCIERRE S ENDFOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("N_FOR",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // COND ::= B COND1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("COND",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // COND ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("COND",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // COND1 ::= COND1 COMA B 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("COND1",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // COND1 ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("COND1",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // N_FOREACH ::= FOREACH ID IN ID DO S ENDFOREACH 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("N_FOREACH",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // N_REPEAT ::= REPEAT S UNTIL B ENDREPEAT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("N_REPEAT",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // N_SWITCH ::= SWITCH PAP ID PCIERRE N_CASE N_DEFAULT ENDSWITCH 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("N_SWITCH",21, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // N_CASE ::= CASE PAP VAL PCIERRE S 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("N_CASE",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // N_CASE ::= N_CASE CASE PAP VAL PCIERRE S 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("N_CASE",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // N_DEFAULT ::= DEFAULT S 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("N_DEFAULT",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // N_DEFAULT ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("N_DEFAULT",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // N_RET ::= RETURN VAL PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("N_RET",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // TIPO ::= INT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TIPO",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // TIPO ::= FLOAT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TIPO",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // TIPO ::= CHAR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TIPO",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // TIPO ::= STRING 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TIPO",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // TIPO ::= BOOL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TIPO",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // VAL ::= VCHAR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("VAL",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // VAL ::= VSTRING 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("VAL",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // VAL ::= B 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("VAL",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // B ::= NOT B 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("B",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // B ::= B0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("B",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // B0 ::= B0 OR B1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("B0",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // B0 ::= B1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("B0",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // B1 ::= B1 AND B2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("B1",29, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // B1 ::= B2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("B1",29, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // B2 ::= B2 COMP B3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("B2",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // B2 ::= B3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("B2",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // B3 ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("B3",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // B3 ::= A 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("B3",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // COMP ::= OPIGUAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("COMP",33, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // COMP ::= OPDISTINTO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("COMP",33, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // COMP ::= MENOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("COMP",33, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // COMP ::= MENORIG 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("COMP",33, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // COMP ::= MAYOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("COMP",33, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // COMP ::= MAYORIG 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("COMP",33, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // A ::= A SUMA A1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("A",34, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // A ::= A RESTA A1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("A",34, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // A ::= A1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("A",34, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // A1 ::= A1 MOD A2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("A1",35, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // A1 ::= A2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("A1",35, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // A2 ::= A2 DIVENT A3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("A2",36, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // A2 ::= A3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("A2",36, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // A3 ::= A3 DIV A4 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("A3",37, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // A3 ::= A4 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("A3",37, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // A4 ::= A4 MULT A5 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("A4",38, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // A4 ::= A5 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("A4",38, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // A5 ::= A6 EXP A5 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("A5",39, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // A5 ::= A6 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("A5",39, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // A6 ::= PAP B PCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("A6",40, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // A6 ::= ENT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("A6",40, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // A6 ::= REAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("A6",40, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // A6 ::= ID 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("A6",40, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalizadorSintacticoTiny$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
              return CUP$AnalizadorSintacticoTiny$do_action_part00000000(
                               CUP$AnalizadorSintacticoTiny$act_num,
                               CUP$AnalizadorSintacticoTiny$parser,
                               CUP$AnalizadorSintacticoTiny$stack,
                               CUP$AnalizadorSintacticoTiny$top);
    }
}

