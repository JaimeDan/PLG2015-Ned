package asint;

import java_cup.runtime.*;
import alex.AnalizadorLexicoTiny;
import alex.UnidadLexica;
import errors.GestionErroresTiny;

scan with {: return getScanner().next_token(); :};
parser code {: 
   private GestionErroresTiny errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }
:};
init with {: 
   errores = new GestionErroresTiny();
   AnalizadorLexicoTiny alex = (AnalizadorLexicoTiny)getScanner();
   alex.fijaGestionErrores(errores);
:};


terminal     BEGIN, END, DECLARE, VAR, CLASS, FUNCTION,
			 CCLASS, PUBLIC, PRIVATE, 
			 IF, THEN, ELSE, ENDIF, WHILE, DO, ENDWHILE, FOR, ENDFOR, 
			 FOREACH, IN, ENDFOREACH, REPEAT, UNTIL, ENDREPEAT, 
			 SWITCH, CASE, DEFAULT, ENDSWITCH, RETURN,
			 INT, FLOAT, CHAR, STRING, BOOL, 
			 ID, IID, ENT, REAL, BOOLEAN, 
			 SUMA, RESTA, MULT, DIV, DIVENT, MOD, EXP, AND, OR, NOT,
			 PAP, PCIERRE, LAP, LCIERRE, OPIGUAL, OPDISTINTO, 
			 MENOR, MENORIG, MAYOR, MAYORIG, 
			 IGUAL, COMA, PUNTOCOMA;

non terminal  CODE, OPC, S, DV, DF;

CODE  ::= OPC BEGIN S END ;
OPC   ::= [DECLARE VAR DV][DECLARE FUNCTION DF]
DV    ::= 

ASIG  ::= DONDE LDs | ;
LDs ::= LDs COMA D | D ;
D   ::= IDEN IGUAL E0 ;
E0  ::= E0 OP0 E1  | E1 ;
E1  ::= E1 OP1 E2  | E2 ;
E2  ::= ENT  | REAL  | IDEN  | PAP E0 PCIERRE ;  
OP0 ::= MAS  | MENOS ;
OP1 ::= POR | DIV ;


